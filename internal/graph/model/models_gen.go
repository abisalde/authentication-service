// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type AccountVerification struct {
	Code  string `json:"code"`
	Email string `json:"email"`
}

type ChangePasswordInput struct {
	OldPassword        string `json:"oldPassword"`
	NewPassword        string `json:"newPassword"`
	ConfirmNewPassword string `json:"confirmNewPassword"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type OAuthLoginInput struct {
	Code        string        `json:"code"`
	Provider    OAuthProvider `json:"provider"`
	RedirectURI *string       `json:"redirectUri,omitempty"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Query struct {
}

type RegisterInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type ResendVerificationCode struct {
	Email string `json:"email"`
}

type UpdateProfileInput struct {
	FirstName       string            `json:"firstName"`
	LastName        string            `json:"lastName"`
	Address         *UserAddressInput `json:"address,omitempty"`
	PhoneNumber     *string           `json:"phoneNumber,omitempty"`
	MarketingOptIn  bool              `json:"marketingOptIn"`
	TermsAcceptedAt *time.Time        `json:"termsAcceptedAt,omitempty"`
}

// Represents a user's address.
type UserAddress struct {
	StreetName *string `json:"streetName,omitempty"`
	City       *string `json:"city,omitempty"`
	State      *string `json:"state,omitempty"`
	ZipCode    *string `json:"zipCode,omitempty"`
	Country    *string `json:"country,omitempty"`
}

type UserAddressInput struct {
	StreetName *string `json:"streetName,omitempty"`
	City       *string `json:"city,omitempty"`
	// Must match postal format for the country
	ZipCode *string `json:"zipCode,omitempty"`
	// Country of residence/stay
	Country *string `json:"country,omitempty"`
	// State of country residence/stay
	State *string `json:"state,omitempty"`
}

type UserConnection struct {
	Edges    []*UserEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor string `json:"cursor"`
}

type AuthProvider string

const (
	AuthProviderEmail    AuthProvider = "EMAIL"
	AuthProviderGoogle   AuthProvider = "GOOGLE"
	AuthProviderFacebook AuthProvider = "FACEBOOK"
)

var AllAuthProvider = []AuthProvider{
	AuthProviderEmail,
	AuthProviderGoogle,
	AuthProviderFacebook,
}

func (e AuthProvider) IsValid() bool {
	switch e {
	case AuthProviderEmail, AuthProviderGoogle, AuthProviderFacebook:
		return true
	}
	return false
}

func (e AuthProvider) String() string {
	return string(e)
}

func (e *AuthProvider) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthProvider", str)
	}
	return nil
}

func (e AuthProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AuthProvider) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AuthProvider) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ErrorType string

const (
	ErrorTypeInternalServerError ErrorType = "INTERNAL_SERVER_ERROR"
	ErrorTypeNotFound            ErrorType = "NOT_FOUND"
	ErrorTypeBadRequest          ErrorType = "BAD_REQUEST"
	ErrorTypeForbidden           ErrorType = "FORBIDDEN"
	ErrorTypeConflict            ErrorType = "CONFLICT"
	ErrorTypeRateLimited         ErrorType = "RATE_LIMITED"
	ErrorTypePassword            ErrorType = "PASSWORD"
	ErrorTypeEmail               ErrorType = "EMAIL"
	ErrorTypeEmailExists         ErrorType = "EMAIL_EXISTS"
	ErrorTypeWeakPassword        ErrorType = "WEAK_PASSWORD"
	ErrorTypeInvalidInput        ErrorType = "INVALID_INPUT"
	ErrorTypeToken               ErrorType = "TOKEN"
	ErrorTypeUnauthenticated     ErrorType = "UNAUTHENTICATED"
)

var AllErrorType = []ErrorType{
	ErrorTypeInternalServerError,
	ErrorTypeNotFound,
	ErrorTypeBadRequest,
	ErrorTypeForbidden,
	ErrorTypeConflict,
	ErrorTypeRateLimited,
	ErrorTypePassword,
	ErrorTypeEmail,
	ErrorTypeEmailExists,
	ErrorTypeWeakPassword,
	ErrorTypeInvalidInput,
	ErrorTypeToken,
	ErrorTypeUnauthenticated,
}

func (e ErrorType) IsValid() bool {
	switch e {
	case ErrorTypeInternalServerError, ErrorTypeNotFound, ErrorTypeBadRequest, ErrorTypeForbidden, ErrorTypeConflict, ErrorTypeRateLimited, ErrorTypePassword, ErrorTypeEmail, ErrorTypeEmailExists, ErrorTypeWeakPassword, ErrorTypeInvalidInput, ErrorTypeToken, ErrorTypeUnauthenticated:
		return true
	}
	return false
}

func (e ErrorType) String() string {
	return string(e)
}

func (e *ErrorType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorType", str)
	}
	return nil
}

func (e ErrorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ErrorType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ErrorType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Login & OAUTH
type OAuthProvider string

const (
	OAuthProviderGoogle   OAuthProvider = "GOOGLE"
	OAuthProviderFacebook OAuthProvider = "FACEBOOK"
)

var AllOAuthProvider = []OAuthProvider{
	OAuthProviderGoogle,
	OAuthProviderFacebook,
}

func (e OAuthProvider) IsValid() bool {
	switch e {
	case OAuthProviderGoogle, OAuthProviderFacebook:
		return true
	}
	return false
}

func (e OAuthProvider) String() string {
	return string(e)
}

func (e *OAuthProvider) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OAuthProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OAuthProvider", str)
	}
	return nil
}

func (e OAuthProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OAuthProvider) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OAuthProvider) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type RateLimitMethods string

const (
	RateLimitMethodsLogin                  RateLimitMethods = "LOGIN"
	RateLimitMethodsRegister               RateLimitMethods = "REGISTER"
	RateLimitMethodsUpdateProfile          RateLimitMethods = "UPDATE_PROFILE"
	RateLimitMethodsChangePassword         RateLimitMethods = "CHANGE_PASSWORD"
	RateLimitMethodsVerifyAccount          RateLimitMethods = "VERIFY_ACCOUNT"
	RateLimitMethodsResendVerificationCode RateLimitMethods = "RESEND_VERIFICATION_CODE"
)

var AllRateLimitMethods = []RateLimitMethods{
	RateLimitMethodsLogin,
	RateLimitMethodsRegister,
	RateLimitMethodsUpdateProfile,
	RateLimitMethodsChangePassword,
	RateLimitMethodsVerifyAccount,
	RateLimitMethodsResendVerificationCode,
}

func (e RateLimitMethods) IsValid() bool {
	switch e {
	case RateLimitMethodsLogin, RateLimitMethodsRegister, RateLimitMethodsUpdateProfile, RateLimitMethodsChangePassword, RateLimitMethodsVerifyAccount, RateLimitMethodsResendVerificationCode:
		return true
	}
	return false
}

func (e RateLimitMethods) String() string {
	return string(e)
}

func (e *RateLimitMethods) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RateLimitMethods(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RateLimitMethods", str)
	}
	return nil
}

func (e RateLimitMethods) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RateLimitMethods) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RateLimitMethods) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UserRole string

const (
	UserRoleAdmin UserRole = "ADMIN"
	UserRoleUser  UserRole = "USER"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleUser,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleUser:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
