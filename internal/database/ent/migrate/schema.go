// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "street_name", Type: field.TypeString, Size: 100, Default: ""},
		{Name: "city", Type: field.TypeString, Size: 50, Default: ""},
		{Name: "zip_code", Type: field.TypeString, Size: 20, Default: ""},
		{Name: "country", Type: field.TypeString, Size: 160, Default: ""},
		{Name: "state", Type: field.TypeString, Size: 100, Default: ""},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString, Nullable: true},
		{Name: "oauth_id", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "provider", Type: field.TypeEnum, Enums: []string{"GOOGLE", "FACEBOOK", "EMAIL"}, Default: "EMAIL"},
		{Name: "first_name", Type: field.TypeString, Size: 50, Default: ""},
		{Name: "last_name", Type: field.TypeString, Size: 50, Default: ""},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"ADMIN", "USER"}, Default: "USER"},
		{Name: "is_email_verified", Type: field.TypeBool, Default: false},
		{Name: "marketing_opt_in", Type: field.TypeBool, Default: false},
		{Name: "terms_accepted_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_login_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_address", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_user_addresses_address",
				Columns:    []*schema.Column{UsersColumns[21]},
				RefColumns: []*schema.Column{UserAddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[9]},
			},
			{
				Name:    "user_oauth_id_provider",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[11], UsersColumns[12]},
			},
			{
				Name:    "user_last_login_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[20]},
			},
			{
				Name:    "user_is_email_verified",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[17]},
			},
		},
	}
	// UserAddressesColumns holds the columns for the "user_addresses" table.
	UserAddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// UserAddressesTable holds the schema information for the "user_addresses" table.
	UserAddressesTable = &schema.Table{
		Name:       "user_addresses",
		Columns:    UserAddressesColumns,
		PrimaryKey: []*schema.Column{UserAddressesColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		UsersTable,
		UserAddressesTable,
	}
)

func init() {
	UsersTable.ForeignKeys[0].RefTable = UserAddressesTable
}
