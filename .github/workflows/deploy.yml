name: Authentication Service Deployment

on: 
  push:
    branches:
      - 'release/**'
    paths: 
    - 'cmd/**'
    - 'pkg/**'
    - 'go.mod'
    - 'go.sum'
    - '.github/workflows/deploy.yml'
    - 'deployments/**'
    - 'internal/**'
    - 'scripts/**'
    - 'Dockerfile'
    - 'gqlgen.yml'

env:
 REGISTRY: ghcr.io
 IMAGE_NAME: ${{ github.repository }}/authentication-service
 IMAGE_TAG: ${{ github.sha }}
 COMPOSE_DIR: deployments

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker Compose for Production
        run: |
          ./scripts/setup.sh
          cat deployments/docker-compose.prod.yml | grep -v 'password'

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Generate Docker Compose for Production
        run: |
          ./scripts/setup.sh > deployments/docker-compose.prod.yml
          cat deployments/docker-compose.prod.yml | grep -v 'password'

      - name: Set environment variables
        run: |
          # For MySQL/Redis passwords
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
          echo "PORT"="8080" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "SENDER_EMAIL=${{ env.SENDER_EMAIL }}" >> .env
          echo "APP_ENV=production" >> .env
          echo "APP_HOST_PORT=8080" >> .env

      - name: Deploy using Docker Compose
        run: |
          docker-compose -f deployments/docker-compose.prod.yml up -d --remove-orphans --build
          docker-compose -f deployments/docker-compose.prod.yml ps
      
      - name: Health check
        run: |
          docker-compose -f deployments/docker-compose.prod.yml exec mysql mysqladmin ping -h localhost --silent
          docker-compose -f deployments/docker-compose.prod.yml exec redis redis-cli -a $REDIS_PASSWORD ping | grep -q PONG
          docker-compose -f deployments/docker-compose.prod.yml exec auth-service curl -f http://localhost:8080/health || exit 1
          echo "All services are healthy."
          docker-compose -f deployments/docker-compose.prod.yml logs --tail=100
          docker-compose -f deployments/docker-compose.prod.yml down --remove-orphans
          echo "Deployment completed successfully."
        env:
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          COMPOSE_DIR: ${{ env.COMPOSE_DIR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_DEFAULT_PLATFORM: linux/amd64   