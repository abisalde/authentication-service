name: Authentication Service Deployment

on: 

  # pull_request:
  #   branches:
  #     - 'release/**'
  #   paths: 
  #   - 'cmd/**'
  #   - 'pkg/**'
  #   - 'go.mod'
  #   - 'go.sum'
  #   - '.github/workflows/deploy.yml'
  #   - 'deployments/**'
  #   - 'internal/**'
  #   - 'scripts/**'
  #   - 'Dockerfile'
  #   - 'gqlgen.yml'

  push:
    branches:
      - 'release/**'
    paths: 
    - 'cmd/**'
    - 'pkg/**'
    - 'go.mod'
    - 'go.sum'
    - '.github/workflows/deploy.yml'
    - 'deployments/**'
    - 'internal/**'
    - 'scripts/**'
    - 'Dockerfile'
    - 'gqlgen.yml'



jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAG: ${{ github.sha }}
      COMPOSE_DIR: deployments
    permissions:
      contents: read
      packages: write 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host


      - name: Generate Docker Compose for Production
        run: |
          ./scripts/setup.sh

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          builder: ${{ steps.buildx.outputs.name }}


  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Make setup script executable
        run: chmod +x ./scripts/setup.sh

      - name: Create empty prod compose file
        run: touch deployments/docker-compose.prod.yml && echo "test content" > deployments/docker-compose.prod.yml

      - name: Generate Docker Compose for Production
        run: |
          echo "Generating docker-compose.prod.yml..."
          # Ensure the script is executable
          chmod +x ./scripts/setup.sh
          # Run the setup script to generate the compose file
          ./scripts/setup.sh
        shell: /usr/bin/bash -e {0}

      - name: Set environment variables
        run: |
          # For MySQL/Redis passwords
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
          echo "PORT"="8080" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "SENDER_EMAIL=${{ env.SENDER_EMAIL }}" >> .env
          echo "APP_ENV=production" >> .env
          echo "APP_HOST_PORT=8080" >> .env
      
      - name: Debug Files in Deployments Directory
        run: |
          echo "--- Files in Deployments Directory ---"
          echo "--- Files in Repository Root ---"
          ls -lA ${{ github.workspace }}
          echo "--------------------------------------------------------"
        shell: /usr/bin/bash -e {0}

      - name: Deploy using Docker Compose
        run: docker-compose -f deployments/docker-compose.prod.yml up -d --remove-orphans --build
        working-directory: ${{ env.COMPOSE_DIR }}
      
      - name: Check MySQL Container Logs (if it fails)
        if: failure()
        run: docker logs mysql
        shell: /usr/bin/bash -e {0}

        env:
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          COMPOSE_DIR: ${{ env.COMPOSE_DIR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_DEFAULT_PLATFORM: linux/amd64   